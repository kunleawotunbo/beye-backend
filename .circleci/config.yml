# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1 # use CircleCI 2.1

workflows:
  version: 2
  build-deploy:
    jobs:
      - unit-test
      - publish-docker:
          requires:
            - unit-test

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # runs not using Workflows must have a `build` job as entry point
  unit-test:

    working_directory: ~/beye-backend # directory where steps will run

    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker: # run the steps with Docker
      - image: cimg/openjdk:11.0 # ...with this image as the primary container; this is where all `steps` will run
        environment:
          SPRING_PROFILES_ACTIVE: test
      - image: cimg/mysql:5.7 # mysql 5.7 docker image
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd
          #MYSQL_ALLOW_EMPTY_PASSWORD: yes

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
            nc -z 127.0.0.1 3306 && echo Success && exit 0
            echo -n .
            sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Install MySQL CLI
          command: |
            sudo apt-get update -y
            sudo apt-get install -y default-mysql-client
            mysql -h 127.0.0.1 -u root -prootpw --execute="use test_db;"

      - run:
          name: Creating Artifacts directory
          command: |
            echo "my artifact file" > /tmp/art-1;
            mkdir /tmp/artifacts;

      - run:
          name: Creating directory for test result
          command: |
            set -xu
            mkdir -p /tmp/test-reports

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: beye-backend-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: beye-backend-{{ checksum "pom.xml" }}

      - run:
          name: Build and unit test
          command: |
            mvn package -B \
              -Dbuild.number=${CIRCLE_BUILD_NUM} \
              -Dcommit.hash=${CIRCLE_SHA1} \
              -Dcircle.workflow.guid=${CIRCLE_WORKFLOW_ID} \
              -Dbuild.user=${CIRCLE_PROJECT_USERNAME} \
              -Dbuild.repo=${CIRCLE_PROJECT_REPONAME}

      #- run: mvn package # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
         #path: /tmp/test-reports
         path: target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          # path: artifacts/beye-backend.jar
          path: /tmp/artifacts
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

  publish-docker:
    docker:
      - image: cimg/openjdk:11.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - beye-backend-{{ checksum "pom.xml" }}
            - beye-backend
      - run: mvn dependency:go-offline
      - run: cp .mvn/wrapper/settings.xml ~/.m2/settings.xml
      - run: echo "<settingsSecurity><master>${maven_security_master}</master></settingsSecurity>" > ~/.m2/settings-security.xml
      - run:
          name: Publish Docker image with Jib
          command: |
            bash ./mvnw compile jib:build -B -DskipTests=true \
              -Dbuild.number=${CIRCLE_BUILD_NUM} \
              -Dcommit.hash=${CIRCLE_SHA1} \
              -Dcircle.workflow.guid=${CIRCLE_WORKFLOW_ID} \
              -Dbuild.user=${CIRCLE_PROJECT_USERNAME} \
              -Dbuild.repo=${CIRCLE_PROJECT_REPONAME}

# https://springframework.guru/configuring-mysql-with-circleci/
