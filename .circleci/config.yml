# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1 # use CircleCI 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build: # runs not using Workflows must have a `build` job as entry point

    working_directory: ~/beye-backend # directory where steps will run

    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker: # run the steps with Docker
      - image: cimg/openjdk:11.0 # ...with this image as the primary container; this is where all `steps` will run
      - image: cimg/mysql:5.7 # mysql 5.7 docker image
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps: # a collection of executable commands

      - checkout # check out source code to working directory

#      - run:
#          name: Wait for Database Connection
#          command:
#            dockerize -wait tcp://localhost:3306 -timeout 1m
#            sudo apt-get update
#            sudo apt-get install mysql*
#            mysql -h 127.0.0.1 -u root -prootpw --execute="use test_db;"
      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
            nc -z 127.0.0.1 3306 && echo Success && exit 0
            echo -n .
            sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Install MySQL CLI;
          command: |
            sudo apt-get install default-mysql-client

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: beye-backend-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: beye-backend-{{ checksum "pom.xml" }}

      - run: mvn package # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: /tmp/test-results

      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: artifacts/beye-backend.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples


# https://springframework.guru/configuring-mysql-with-circleci/
